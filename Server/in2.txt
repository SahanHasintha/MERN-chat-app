const express = require('express');
const app = express();
const http = require('http');
const socketio = require('socket.io');

const mongoDB = require('./config/mongoDbConnect');
const {USER_LOGIN,USER_REGISTER, USER_CONNECTED, LOG_OUT, PRIVATE_MESSAGE, SENT_MESSAGE, MESSAGE_RECIEVED} = require('../client/src/Event');
const {Register, Login, addChatSender, addChatReciever, addMessage} = require('./routes/user');
const {createChat, addMessageToChat} = require('./routes/chats');

mongoDB();

const server = http.createServer(app);
const io = socketio(server);

let connectedUsers = [];

io.on('connect',(socket)=>{
    socket.on(USER_REGISTER,async (formData, callback)=>{
        const {error, user} = await Register(formData);
        if(user){
            callback({user})
        }
        if(error){
            callback({error})
        }
    });

    socket.on(USER_LOGIN,async (formData, callback)=>{
        try {
            const {error, user} = await Login(formData)
            if(error){
                callback({error});
            }
            if(user){
                callback({user});
            }
        } catch (err) {
            console.log(err.message)
        }
        
    })

    socket.on(USER_CONNECTED, (user)=>{
        user.socketId = socket.id;
        socket.user = user;
        connectedUsers = [...connectedUsers, user];
    })

    socket.on(PRIVATE_MESSAGE,async ({reciever, sender}, callback)=>{
        try {
            const rec = connectedUsers.filter((user)=> user.name === reciever);
            if(rec){
                let chatId = rec[0].id > sender.id ? `${rec[0].id}-${sender.id}`:`${sender.id}-${rec[0].id}`;
                    console.log(chatId);
                    const {chatSender} = await addChatSender({chatId:chatId, chatName:`${rec[0].name}&${sender.name}`, user:sender, users:[rec[0], sender]});
                    const {chatReciever} = await addChatReciever({chatId:chatId, chatName:`${rec[0].name}&${sender.name}`,user:rec[0], users:[rec[0], sender]});
                    if(chatReciever){
                        socket.to(rec[0].socketId).emit(PRIVATE_MESSAGE, chatReciever);
                    }
                    if(chatSender){
                        socket.emit(PRIVATE_MESSAGE, chatSender);
                    }
            
            }else{
                callback({error:'No user for this name'})
            }
            
        } catch (err) {
            console.log(err.message);
        }
    })

    socket.on(SENT_MESSAGE,async (data)=>{
        const addMgToSenderData = {message:data.message, chatId:data.chatId,senderName:data.sender.name ,senderId:data.sender._id}
        const addMgToRecieverData = {message:data.message, chatId:data.chatId,senderName:data.sender.name ,senderId:data.reciever._id}
        try {
            await addMessage(addMgToSenderData);
            await addMessage(addMgToRecieverData)
            io.emit(`${MESSAGE_RECIEVED}-${data.chatId}`,{message:data.message,sender:data.sender,chatId:data.chatId})
            console.log(`${MESSAGE_RECIEVED}-${data.chatId}`);
            // if(newMessage){
            //     const {message, sender} = newMessage;
            //     console.log(`${MESSAGE_RECIEVED}-${data.chatId}`)
            //     io.emit(`${MESSAGE_RECIEVED}-${data.chatId}`, {message, sender, chatId:data.chatId})
            // }
        } catch (err) {
            console.log(err.message)
        }
        
    })

    socket.on('disconnect',()=>{
        if(socket.user){
            const index = connectedUsers.map(user => user.email).indexOf(socket.user.email);
            connectedUsers.splice(index, 1);
        }
    })

    socket.on(LOG_OUT, () => {
        
        const index = connectedUsers.map(user => user.email).indexOf(socket.user.email);
        connectedUsers.splice(index, 1);
    })
})

const PORT = process.env.PORT || 5000;
server.listen(PORT, ()=> {
    console.log('Server connected !');
})